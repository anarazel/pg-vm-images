# Due to the dependency on encrypted variables, this will only work in a
# specific repo
only_if: $CIRRUS_REPO_OWNER == 'anarazel' && $CIRRUS_REPO_NAME == 'pg-vm-images'

env:
  CIRRUS_LOG_TIMESTAMP: true

  # See gcp_project_setup.txt for setup instructions
  GCP_PROJECT_MAIN: pg-ci-images
  GCP_PROJECT_DEV: pg-ci-images-dev

  # the following variables are chosen in .cirrus.star, based on the branch
  # being built etc
  # BRANCH_TYPE = dev|main
  # BUCKET = ${GCP_PROJECT_MAIN}-bucket or ${GCP_PROJECT_DEV}-bucket
  # GCP_PROJECT = $GCP_PROJECT_MAIN or $GCP_PROJECT_DEV
  # GCP_REGION
  # GCP_REPO


# central definition for the tasks interacting with gcp

# shared gcp auth
gcp_auth: &gcp_auth
  env:
    # image-builder@pg-ci-images-dev.iam.gserviceaccount.com
    GAC_DEV: ENCRYPTED[40c920fc0112638b1ada05929628f296b630db4252100f14ae966effc5bcd840d6cedeb3cbd96bc14ebbf35695bd43b1]
    # image-builder@pg-ci-images.iam.gserviceaccount.com
    GAC_MAIN: ENCRYPTED[0529fb776190443002786f8e413f98d09ca79170c5a1c5cf66dd076fb232f778c9c13679b2e9f697eeede64033c1a3dd]

# gcp auth for unixoid systems
gcp_auth_unix: &gcp_auth_unix
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: /gcp-service-account-${BRANCH_TYPE}.json

  gcp_main_key_file:
    path: /gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: /gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
    - gcloud auth list

# gcp auth for windows
gcp_auth_win: &gcp_auth_win
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: c:/gcp-service-account-%BRANCH_TYPE%.json

  gcp_main_key_file:
    path: c:/gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: c:/gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=%GOOGLE_APPLICATION_CREDENTIALS%
    - gcloud auth list

# docker->gcp auth for unixoid systems
gcp_docker_auth_unix: &gcp_docker_auth_unix
  <<: *gcp_auth_unix
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet $GCP_REGION-docker.pkg.dev

# docker->gcp  auth for windows systems
gcp_docker_auth_win: &gcp_docker_auth_win
  <<: *gcp_auth_win
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet %GCP_REGION%-docker.pkg.dev


task:
  name: cleanup-leftover-running

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 0.5
    memory: 256Mi

  <<: *gcp_auth_unix

  cleanup_leftover_running_script:
    ./gcp_delete_leftover_running.py


task:
  matrix:
    - name: freebsd-13
      env:
        PACKERFILE: packer/freebsd.pkr.hcl

    - env:
        PACKERFILE: packer/linux_debian.pkr.hcl
        SCRIPTS: scripts/linux_debian_*

      matrix:
        - name: bullseye
        - name: sid
        - name: sid-newkernel
        - name: sid-newkernel-uring

    - env:
        PACKERFILE: packer/windows.pkr.hcl
        SCRIPTS: scripts/windows*

      matrix:
        - name: windows-ci-vs-2019
        - name: windows-ci-mingw64

  depends_on: cleanup-leftover-running

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 0.5
    memory: 256Mi

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'docker/linux_debian_packer', $SCRIPTS, $PACKERFILE)
  allow_failures: $CIRRUS_TASK_NAME =~ '.*\[sid\].*'
  auto_cancellation: false

  <<: *gcp_auth_unix

  info_script:
    - packer --version

  export_date_script: |
    DATE=$(date --utc +'%Y-%m-%dt%H-%M-%S')
    echo "DATE=${DATE}" | tee -a $CIRRUS_ENV

  build_image_script: |
    packer build \
      -only "*.${CIRRUS_TASK_NAME}" \
      -timestamp-ui \
      -force \
      -var "image_date=$DATE" \
      -var "task_name=${CIRRUS_TASK_NAME}" \
      -var gcp_project=$GCP_PROJECT \
      "$PACKERFILE"

  make_image_public_script: |
    gcloud compute images add-iam-policy-binding \
      --project "$GCP_PROJECT" \
      --member=allAuthenticatedUsers \
      --role=roles/compute.imageUser \
      pg-ci-${CIRRUS_TASK_NAME}-${DATE}

    gcloud compute images update \
      --project "$GCP_PROJECT" \
      --family pg-ci-${CIRRUS_TASK_NAME} \
      pg-ci-${CIRRUS_TASK_NAME}-${DATE}


task:
  matrix:
    - env:
        PACKERFILE: packer/netbsd_openbsd.pkr.hcl
        PKRVARFILE: packer/openbsd.pkrvars.hcl
        VERSION: 7-3
      matrix:
        - name: openbsd-vanilla
          depends_on:
            - cleanup-leftover-running
        - name: openbsd-postgres
          depends_on:
            - openbsd-vanilla

    - env:
        PACKERFILE: packer/netbsd_openbsd.pkr.hcl
        PKRVARFILE: packer/netbsd.pkrvars.hcl
        VERSION: 9-3
      matrix:
        - name: netbsd-vanilla
          depends_on:
            - cleanup-leftover-running
        - name: netbsd-postgres
          depends_on:
            - netbsd-vanilla

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 2
    memory: 4G

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'docker/linux_debian_packer', 'files/bsd/*', 'scripts/bsd/*', $PACKERFILE, $PKRVARFILE)
  auto_cancellation: false

  <<: *gcp_auth_unix

  info_script:
    - packer --version

  export_date_script: |
    DATE=$(date --utc +'%Y-%m-%dt%H-%M-%S')
    echo "DATE=${DATE}" | tee -a $CIRRUS_ENV

  build_image_script: |
    export PACKER_LOG=1

    packer build \
      -only "*.${CIRRUS_TASK_NAME}" \
      -timestamp-ui \
      -force \
      -var-file="${PKRVARFILE}" \
      -var "version=${VERSION}" \
      -var "image_date=$DATE" \
      -var "image_name=${CIRRUS_TASK_NAME}" \
      -var "bucket=$BUCKET" \
      -var gcp_project=$GCP_PROJECT \
      "$PACKERFILE"

  make_image_public_script: |
    gcloud compute images add-iam-policy-binding \
      --project "$GCP_PROJECT" \
      --member=allAuthenticatedUsers \
      --role=roles/compute.imageUser \
      pg-ci-${CIRRUS_TASK_NAME}-${DATE}

    gcloud compute images update \
      --project "$GCP_PROJECT" \
      --family pg-ci-${CIRRUS_TASK_NAME}-${VERSION} \
      pg-ci-${CIRRUS_TASK_NAME}-${DATE}


# Clean up old images regularly - after a while the individually small cost
# starts adding up
#
# Leave old images around for two weeks, to allow recreating CI failures
# precisely.
task:
  name: cleanup-old

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 0.5
    memory: 256Mi

  <<: *gcp_auth_unix

  cleanup_vm_images_script:
    ./gcp_delete_old_images.py

  # FIXME: deletion doesn't work 100% reliable, because this doesn't correctly
  # deal with multi-arch containers (gcloud shows the individual architecture
  # specific containers without tags, even if the manifest has tags)
  cleanup_container_images_script: |
    gcloud artifacts docker images list \
      --include-tags \
      --format 'value[separator=@](package,version)' \
      --filter='createTime < -P14d AND -tags:*' \
      $GCP_REPO | \
        xargs --verbose --no-run-if-empty -n 1 gcloud artifacts docker images delete || true


task:
  name: build-containers-linux

  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux
    cpu: 2
    memory: 8G
  env:
    IMAGE: linux_debian_bullseye_ci

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'scripts/linux_debian*', 'docker/linux_debian_bullseye_ci')

  <<: *gcp_docker_auth_unix

  multibuilder_script:
    - docker buildx create --name multibuilder
    - docker buildx use multibuilder
    - docker buildx inspect --bootstrap

  # XXX: would be nicer to split into multiple steps, so that e.g. build vs
  # upload time are visible
  #
  # XXX: would be nice to test images before tagging them as available
  #
  # FIXME: disabled caching for now, there doesn't appear to be a good builtin
  # way of regenerating cached layers regularly.
  #    --cache-from type=registry,ref=$GCP_REPO/$IMAGE \
  #    --cache-to=type=inline \
  #
  # Disabled linux/arm64, fails currently due to reasons outside of our control
  build_script: |
    DATE=$(date --utc +'%Y-%m-%dt%H-%M-%S')

    docker buildx build \
      --platform linux/amd64 \
      --build-arg DATE=$DATE \
      --build-arg IMAGE_NAME=$IMAGE \
      --tag $GCP_REPO/$IMAGE:latest \
      --tag $GCP_REPO/$IMAGE:$DATE \
      -f docker/$IMAGE \
      --push \
      .

    docker buildx imagetools inspect $GCP_REPO/$IMAGE:latest


task:
  name: test-linux-container-amd64
  depends_on:
    - build-containers-linux
  container:
    image: $GCP_REPO/linux_debian_bullseye_ci:latest
  test_script:
    - uname -a
    - xsltproc --version
    - env

# Disabled linux/arm64, fails currently due to reasons outside of our control
#task:
#  name: test-linux-container-arm64
#  depends_on:
#    - build-containers-linux
#  arm_container:
#    image: $GCP_REPO/linux_debian_bullseye_ci:latest
#  test_script:
#    - uname -a
#    - xsltproc --version


task:
  matrix:
    - name: test-netbsd
      env:
        IMAGE_NAME: pg-ci-netbsd-postgres-9-3
        PLATFORM: netbsd

    - name: test-openbsd
      env:
        IMAGE_NAME: pg-ci-openbsd-postgres-7-2
        PLATFORM: openbsd

  depends_on:
    - ${PLATFORM}-postgres

  compute_engine_instance:
    image_project: $GCP_PROJECT
    image: family/${IMAGE_NAME}
    platform: ${PLATFORM}

  test_script:
    - uname -a
    - env


task:
  name: test-windows-vs-2019
  depends_on:
    - windows-ci-vs-2019
  compute_engine_instance:
    image_project: $GCP_PROJECT
    image: family/pg-ci-windows-ci-vs-2019
    platform: windows

  test_script:
    - ver
    - set
    - where perl
    - perl --version
    - python --version
    - vcvarsall x64
    - bison --version
    - flex --version


task:
  name: test-windows-mingw64
  depends_on:
    - windows-ci-mingw64
  compute_engine_instance:
    image_project: $GCP_PROJECT
    image: family/pg-ci-windows-ci-mingw64
    platform: windows

  test_script:
    - ver
    - set
    - C:\msys64\usr\bin\bash.exe -lc 'where perl'
    - C:\msys64\usr\bin\bash.exe -lc 'perl --version'
    - C:\msys64\usr\bin\bash.exe -lc 'bison --version'
    - C:\msys64\usr\bin\bash.exe -lc 'flex --version'
