only_if: $CIRRUS_BRANCH == 'main' && $CIRRUS_REPO_OWNER == 'anarazel'

env:
  GAC: ENCRYPTED[08c58c0a60e1b0dfd4748960cef61296508f85b81ea8a553ee06c9df86bb2398c3240b35bfd76196f3967819da15cd25]
  GOOGLE_APPLICATION_CREDENTIALS: pg-vm-images-aio.json
  GCP_PROJECT: pg-vm-images-aio

task:
  container:
    dockerfile: LinuxPackerDockerfile
    cpu: 0.5
    memory: 256Mi

  init_script:
    - echo $GAC | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
    - gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    - packer --version

  matrix:
    - name: freebsd-13-0
      env:
        PACKERFILE: googlecompute/freebsd.pkr.hcl

    - env:
        PACKERFILE: googlecompute/linux.pkr.hcl

      matrix:
        - name: bullseye
        - name: sid
        - name: sid-newkernel
        - name: sid-newkernel-uring

  build_image_script: |
    DATE=$(date --utc +'%Y-%m-%dt%H-%M')

    packer build \
      -only "*.${CIRRUS_TASK_NAME}" \
      -timestamp-ui \
      -force \
      -var "image_date=$DATE" \
      "$PACKERFILE"
    gcloud compute images add-iam-policy-binding \
      --project "$GCP_PROJECT" \
      --member=allAuthenticatedUsers \
      --role=roles/compute.imageUser \
      pg-aio-${CIRRUS_TASK_NAME}-${DATE}


# Clean up old images regularly - after a while the individually small cost
# starts adding up
#
# Leave old images around for two weeks, to allow recreating CI failures
# precisely.
#
# Only do so after a run successfully creating all images, to avoid deleting
# all image versions when image creation has failed for a few days.
task:
  container:
    dockerfile: LinuxPackerDockerfile
    cpu: 0.5
    memory: 256Mi

  name: cleanup-old
  depends_on:
    - freebsd-13-0
    - bullseye
    - sid
    - sid-newkernel
    - sid-newkernel-uring

  init_script:
    - echo $GAC | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
    - gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS

  cleanup_script: |
    images=$(gcloud compute images list \
      --project "$GCP_PROJECT" \
      --format "object value(name)" \
      --no-standard-images \
      --filter='creationTimestamp < -P2W')
    echo -e "list of images to delete:\n$images"
    if [ "$images" != '' ]; then
      gcloud compute images delete \
      --quiet \
      --project "$GCP_PROJECT" \
      $images
    else
      echo no images to delete
    fi
