# Due to the dependency on encrypted variables, this will only work in a
# specific repo
only_if: $CIRRUS_REPO_OWNER == 'anarazel' && $CIRRUS_REPO_NAME == 'pg-vm-images'

env:
  CIRRUS_LOG_TIMESTAMP: true

  # See gcp_project_setup.txt for setup instructions
  GCP_PROJECT_MAIN: pg-ci-images
  GCP_PROJECT_DEV: pg-ci-images-dev

  # the following variables are chosen in .cirrus.star, based on the branch
  # being built etc
  # BRANCH_TYPE = dev|main
  # BUCKET = ${GCP_PROJECT_MAIN}-bucket or ${GCP_PROJECT_DEV}-bucket
  # GCP_PROJECT = $GCP_PROJECT_MAIN or $GCP_PROJECT_DEV
  # GCP_REGION
  # GCP_REPO


# central definition for the tasks interacting with gcp

# shared gcp auth
gcp_auth: &gcp_auth
  env:
    # image-builder@pg-ci-images-dev.iam.gserviceaccount.com
    GAC_DEV: ENCRYPTED[c11b72762b062ffe6f9eb672b9236f3fdfe3404edd786e47fc17ff79714e633688e79da85b9efccd79d52a6322a4f60f]
    # image-builder@pg-ci-images.iam.gserviceaccount.com
    GAC_MAIN: ENCRYPTED[388f06938c10a81478033cb9059c454d1d2e7580e9060e539f0be518b823b5a73cb1bc7c7fcefe351131c57c404c143f]

# gcp auth for unixoid systems
gcp_auth_unix: &gcp_auth_unix
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: /gcp-service-account-${BRANCH_TYPE}.json

  gcp_main_key_file:
    path: /gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: /gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
    - gcloud auth list

# gcp auth for windows
gcp_auth_win: &gcp_auth_win
  <<: *gcp_auth

  env:
    GOOGLE_APPLICATION_CREDENTIALS: c:/gcp-service-account-%BRANCH_TYPE%.json

  gcp_main_key_file:
    path: c:/gcp-service-account-main.json
    variable_name: GAC_MAIN

  gcp_dev_key_file:
    path: c:/gcp-service-account-dev.json
    variable_name: GAC_DEV

  gcp_auth_script:
    - gcloud auth activate-service-account --key-file=%GOOGLE_APPLICATION_CREDENTIALS%
    - gcloud auth list

# docker->gcp auth for unixoid systems
gcp_docker_auth_unix: &gcp_docker_auth_unix
  <<: *gcp_auth_unix
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet $GCP_REGION-docker.pkg.dev

# docker->gcp  auth for windows systems
gcp_docker_auth_win: &gcp_docker_auth_win
  <<: *gcp_auth_win
  gcp_docker_auth_script:
    - gcloud auth configure-docker --quiet %GCP_REGION%-docker.pkg.dev


task:
  matrix:
    - name: freebsd-13
      env:
        PACKERFILE: packer/freebsd.pkr.hcl

    - env:
        PACKERFILE: packer/linux_debian.pkr.hcl

      matrix:
        - name: bullseye
        - name: sid
        - name: sid-newkernel
        - name: sid-newkernel-uring

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 0.5
    memory: 256Mi

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'docker/linux_debian_packer', 'scripts/linux_debian_*', $PACKERFILE)
  auto_cancellation: false

  <<: *gcp_auth_unix

  info_script:
    - packer --version

  build_image_script: |
    DATE=$(date --utc +'%Y-%m-%dt%H-%M')

    packer build \
      -only "*.${CIRRUS_TASK_NAME}" \
      -timestamp-ui \
      -force \
      -var "image_date=$DATE" \
      -var "task_name=${CIRRUS_TASK_NAME}" \
      -var gcp_project=$GCP_PROJECT \
      "$PACKERFILE"
    gcloud compute images add-iam-policy-binding \
      --project "$GCP_PROJECT" \
      --member=allAuthenticatedUsers \
      --role=roles/compute.imageUser \
      pg-ci-${CIRRUS_TASK_NAME}-${DATE}


task:
  matrix:
    # include minor version in vanilla images
    - name: openbsd-7-1-vanilla
      env:
        PACKERFILE: packer/bsd/openbsd_vanilla.pkr.hcl

    # but not in images used for CI
    - name: openbsd-7-postgres
      depends_on:
        - openbsd-7-1-vanilla
      env:
        PACKERFILE: packer/bsd/openbsd_postgres.pkr.hcl

    # see openbsd case
    - name: netbsd-9-2-vanilla
      env:
        PACKERFILE: packer/bsd/netbsd_vanilla.pkr.hcl

    # see openbsd case
    - name: netbsd-9-postgres
      depends_on:
        - netbsd-9-2-vanilla
      env:
        PACKERFILE: packer/bsd/netbsd_postgres.pkr.hcl

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 2
    memory: 4G

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'docker/linux_debian_packer', 'files/bsd/*', 'scripts/bsd/*', $PACKERFILE)
  auto_cancellation: false

  <<: *gcp_auth_unix

  info_script:
    - packer --version

  build_image_script: |
    DATE=$(date --utc +'%Y-%m-%dt%H-%M')
    PACKER_LOG=1

    packer build \
      -timestamp-ui \
      -force \
      -var "image_date=$DATE" \
      -var "image_name=${CIRRUS_TASK_NAME}" \
      -var "bucket=$BUCKET" \
      -var gcp_project=$GCP_PROJECT \
      "$PACKERFILE"
    gcloud compute images add-iam-policy-binding \
      --project "$GCP_PROJECT" \
      --member=allAuthenticatedUsers \
      --role=roles/compute.imageUser \
      pg-ci-${CIRRUS_TASK_NAME}-${DATE}


# Clean up old images regularly - after a while the individually small cost
# starts adding up
#
# Leave old images around for two weeks, to allow recreating CI failures
# precisely.
#
# Only do so after a run successfully creating all images, to avoid deleting
# all image versions when image creation has failed for a few days.
task:
  name: cleanup-old

  container:
    dockerfile: docker/linux_debian_packer
    cpu: 0.5
    memory: 256Mi

  depends_on:
    - freebsd-13
    - netbsd-9-postgres
    - openbsd-7-postgres
    - bullseye
    - sid
    - sid-newkernel
    - sid-newkernel-uring

  <<: *gcp_auth_unix

  cleanup_vm_images_script:
    ./gcp_delete_old_images.py

  # FIXME: deletion doesn't work 100% reliable, because this doesn't correctly
  # deal with multi-arch containers (gcloud shows the individual architecture
  # specific containers without tags, even if the manifest has tags)
  cleanup_container_images_script: |
    gcloud artifacts docker images list \
      --include-tags \
      --format 'value[separator=@](package,version)' \
      --filter='createTime < -P14d AND -tags:*' \
      $GCP_REPO | \
        xargs --verbose --no-run-if-empty -n 1 gcloud artifacts docker images delete || true


task:
  name: build-containers-linux

  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux
    cpu: 2
    memory: 8G
  env:
    IMAGE: linux_debian_bullseye_ci

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'scripts/linux_debian*', 'docker/linux_debian_bullseye_ci')

  <<: *gcp_docker_auth_unix

  multibuilder_script:
    - docker buildx create --name multibuilder
    - docker buildx use multibuilder
    - docker buildx inspect --bootstrap

  # XXX: would be nicer to split into multiple steps, so that e.g. build vs
  # upload time are visible
  #
  # XXX: would be nice to test images before tagging them as available
  #
  # Disabled linux/arm64, fails currently due to reasons outside of our control
  build_script: |
    docker buildx build \
      --cache-from type=registry,ref=$GCP_REPO/$IMAGE \
      --cache-to=type=inline \
      --platform linux/amd64 \
      --tag $GCP_REPO/$IMAGE:latest \
      -f docker/$IMAGE \
      --push \
      .

    docker buildx imagetools inspect $GCP_REPO/$IMAGE:latest


docker_builder:
  name: build-containers-windows

  platform: windows
  os_version: 2019

  skip: $CIRRUS_LAST_GREEN_CHANGE != '' && $CIRRUS_CRON != 'regular-rebuild' && !changesInclude('.cirrus.yml', 'docker/docker/windows_*', 'scripts/windows*')

  <<: *gcp_docker_auth_win

  build_script: |
    docker pull %GCP_REPO%/windows_ci_base:latest || cmd /s /c
    docker build --cache-from %GCP_REPO%/windows_ci_base:latest --cache-from docker.io/cirrusci/windowsservercore:2019-2021.12.07 --tag windows_ci_base:latest -f docker/windows_ci_base .
    docker tag windows_ci_base:latest %GCP_REPO%/windows_ci_base:latest
    docker push %GCP_REPO%/windows_ci_base:latest

    docker pull %GCP_REPO%/windows_ci_vs_base:latest || cmd /s /c
    docker build --cache-from %GCP_REPO%/windows_ci_vs_base:latest --tag windows_ci_vs_base:latest -f docker/windows_ci_vs_base .
    docker tag windows_ci_vs_base:latest %GCP_REPO%/windows_ci_vs_base:latest
    docker push %GCP_REPO%/windows_ci_vs_base:latest

    docker pull %GCP_REPO%/windows_ci_vs_2019:latest || cmd /s /c
    docker build --cache-from %GCP_REPO%/windows_ci_vs_2019:latest --tag windows_ci_vs_2019:latest -f docker/windows_ci_vs_2019 .
    docker tag windows_ci_vs_2019:latest %GCP_REPO%/windows_ci_vs_2019:latest
    docker push %GCP_REPO%/windows_ci_vs_2019:latest

    docker pull %GCP_REPO%/windows_ci_mingw64:latest || cmd /s /c
    docker build --cache-from %GCP_REPO%/windows_ci_mingw64:latest --tag windows_ci_mingw64:latest -f docker/windows_ci_mingw64 .
    docker tag windows_ci_mingw64:latest %GCP_REPO%/windows_ci_mingw64:latest
    docker push %GCP_REPO%/windows_ci_mingw64:latest


task:
  name: test-linux-container-amd64
  depends_on:
    - build-containers-linux
  container:
    image: $GCP_REPO/linux_debian_bullseye_ci:latest
  test_script:
    - uname -a
    - xsltproc --version

# Disabled linux/arm64, fails currently due to reasons outside of our control
#task:
#  name: test-linux-container-arm64
#  depends_on:
#    - build-containers-linux
#  arm_container:
#    image: $GCP_REPO/linux_debian_bullseye_ci:latest
#  test_script:
#    - uname -a
#    - xsltproc --version


task:
  name: test-windows-container-base-amd64
  depends_on:
    - build-containers-windows
  windows_container:
    image: $GCP_REPO/windows_ci_base:latest
  test_script:
    - ver
    - set
    - where perl
    - perl --version
    - python --version
    - diff --version


task:
  name: test-windows-container-vs-2019-amd64
  depends_on:
    - build-containers-windows
  windows_container:
    image: $GCP_REPO/windows_ci_vs_2019:latest
  test_script:
    - ver
    - set
    - where perl
    - perl --version
    - python --version
    - vcvarsall x64
    - bison --version
    - flex --version

task:
  name: test-windows-container-mingw64-amd64
  depends_on:
    - build-containers-windows
  windows_container:
    image: $GCP_REPO/windows_ci_mingw64:latest
  test_script:
    - ver
    - set
    - C:\msys64\usr\bin\bash.exe -lc 'where perl'
    - C:\msys64\usr\bin\bash.exe -lc 'perl --version'
    - C:\msys64\usr\bin\bash.exe -lc 'bison --version'
    - C:\msys64\usr\bin\bash.exe -lc 'flex --version'
